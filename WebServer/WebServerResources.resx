<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="favicon" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\resources\favicon.ico;System.Drawing.Icon, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="pacman" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>pacman.gif;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="PacManDying" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>PacManDying.mp3;System.Byte[], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </data>
  <data name="WebListingPlayer" xml:space="preserve">
    <value>&lt;head&gt;
&lt;script src="https://code.jquery.com/jquery-git.js"&gt;jQuery  &lt;/script&gt;
&lt;script&gt;
    let allSongs = new Map();

    class PlayListManager {
        buildPlaylist() {            
            let playlistDiv = document.getElementById('playlistListing');
            let str = '';
            for(const s of allSongs.keys()) {
                let song = allSongs.get(s);
                str += "&lt;div class='PlayListEditorRow'&gt;&lt;input type='checkbox' id='" + s + "' /&gt; " + song.title + " - " + song.artist + " - " + song.album + "&lt;/div&gt;";
            };

            playlistDiv.innerHTML = str;        
        }

        filterPlaylist() {
            let filterVal = document.getElementById('playlistSongFilter').value;
            allSongs.forEach((song, key) =&gt; {

                let songString = (song.title ? song.title.toLowerCase() : '') + 
                    (song.artist ? song.artist.toLowerCase() : '') +  
                    (song.album ? song.album.toLowerCase() : '');

                if((songString).includes(filterVal.toLowerCase())) {
                   document.getElementById(key).parentElement.style.display = 'block'; 
                } else {
                    document.getElementById(key).parentElement.style.display = 'none';
                }
            });
        }

        savePlaylist() {

            if(document.getElementById('playlistName').value === '') {
                alert('Please name your playlist.');
                return;
            }

            let me = this;
            let playListSongs = Array.from(playlistListing.querySelectorAll('input:checked')).map(s =&gt; s.id);

            if(playListSongs.length == 0) {
                alert('Please select at least one song. Probably more since it is a playlist, right?');
                return;
            }

            $.ajax(
            {
                url: '/playlists/',
                method: "PUT",
                dataType: "json",
                data: {
                    name: document.getElementById('playlistName').value,
                    songs: playListSongs
                },                
                success: function(data) {
                    me.loadPlaylistListings();
                }
            });
        }

        deletePlaylist(playlistName) {
            let me = this;
            $.ajax(
            {
                url: '/playlists/' + playlistName,
                method: "DELETE",
                dataType: "json",                
                success: function(data) {
                    //pl.resetPlaylist(false);
                    me.loadPlaylistListings();
                }
            });
        }

        loadPlaylistListings()
        {
            let me = this;
            $.ajax(
            {
                url: '/playlists/',
                method: "GET",
                dataType: "json",
                success: function(data) {
                    me.setList(data);
                }
            });
        }

        setList(data) {
            let listingContainer = document.getElementById('playlistsListing');
            let str = '';

            for(var i=0; i&lt;data.length; i++) {
                let name = data[i].replace('.\\playlist_', '').replace('.json', '');

                str += "&lt;div class='playlistRow'&gt;&lt;div class='playlistPlayButton' id='" + name + "'&gt;" + name + "&lt;/div&gt; &lt;div class='deletePlaylist' id='delete_" + name + "'&gt;delete&lt;/div&gt;&lt;/div&gt;";
            
            }
            listingContainer.innerHTML = str;
        }

        loadPlaylist(playlistId)
        {
            let me = this;
            $.ajax(
            {
                url: '/playlist/' + playlistId,
                method: "GET",
                dataType: "json",
                success: function(data) {
                   pl.filterToPlaylist(data.List);
                }
            });
        }
    }

    class PlayLibrarian {
        allSongs = null;
        keys = [];
        songIndex = 0;

        constructor()
        {
            this.allSongs = allSongs;
            this.keys = Array.from(this.allSongs.keys());
        }

        load() {
            this._buildList();
        }

        resetPlaylist(startPlayer) {
            this.keys = Array.from(this.allSongs.keys());
            
            this.makePlaylist();
            if(startPlayer) {
                this.getNextSong();
            }            
        }

        filterToPlaylist(playlistSongs)
        {
            this.keys = playlistSongs;

            this.makePlaylist();
            this.getNextSong();
        }

        makePlaylist() {
            this.songIndex = 0;
            this._shuffle();
            let str = '';

            this.keys.forEach(s =&gt; {
                let song = this.allSongs.get(decodeURIComponent(s));
                str += "&lt;div class='PlaylistItem'&gt;" + song.title + " - " + song.artist + "&lt;/div&gt;";
            });

            document.getElementById("playlist").innerHTML = str;
        }

        getNextSong() {
            let player = document.getElementById("visiblePlayer");
            if(this.allSongs !== null &amp;&amp; this.allSongs.size &gt; 0)
            {
                
                let lastSongIndex = this.songIndex;
                this.songIndex++;

                if(this.keys.length &lt;= this.songIndex) {
                    this.songIndex = 0;
                }

                $('.PlaylistItem:nth-child(' + (lastSongIndex + 1) + ')').removeClass('NowPlaying');

                let currentSong = $('.PlaylistItem')[this.songIndex];
                if(currentSong) {
                    $(currentSong).addClass('NowPlaying');
                    //currentSong.scrollIntoView({ behavior: "smooth", block: "center" });
                    currentSong.scrollIntoView();

                    let song = this.allSongs.get(decodeURIComponent(this.keys[this.songIndex].toString()));
                    document.title = "Playing: " + song.title + " - " + song.artist;

                    player.src = "/songajax/" + decodeURIComponent(this.keys[this.songIndex].toString());
                }
            }
        }

        getPreviousSong() {
            let player = document.getElementById("visiblePlayer");
            if(this.allSongs !== null &amp;&amp; this.allSongs.size &gt; 0)
            {
                let lastSong = this.songIndex;

                this.songIndex--;

                if(this.songIndex &lt; 0) {
                    this.songIndex = this.keys.length - 1;
                }

                //PlaylistItem
                $('.PlaylistItem:nth-child(' + (lastSong + 1) +')').removeClass('NowPlaying');
                let currentSong = $('.PlaylistItem:nth-child(' + (this.songIndex + 1) +')');
                if(currentSong) {
                    currentSong.addClass('NowPlaying');
                    //currentSong.get(0).scrollIntoView({ behavior: "smooth", block: "center" });
                    currentSong.get(0).scrollIntoView();

                    let song = this.allSongs.get(decodeURIComponent(this.keys[this.songIndex].toString()));
                    document.title = "Playing: " + song.title + " - " + song.artist;

                    player.src = "/songajax/" + decodeURIComponent(this.keys[this.songIndex].toString());
                }
            }
        }

        _shuffle() {
            
            var currentIndex = this.keys.length, temporaryValue, randomIndex;

            // While there remain elements to shuffle...
            while (0 !== currentIndex) {

                // Pick a remaining element...
                randomIndex = Math.floor(Math.random() * currentIndex);
                currentIndex -= 1;

                // And swap it with the current element.
                temporaryValue = this.keys[currentIndex];
                this.keys[currentIndex] = this.keys[randomIndex];
                this.keys[randomIndex] = temporaryValue;
            }            
        }
    }

    let pl = null;
    let manager = null;

    window.addEventListener('load', (event) =&gt; {
        pl = new PlayLibrarian();
         
        manager = new PlayListManager();
        manager.loadPlaylistListings();

        document.getElementById("visiblePlayer").addEventListener("ended", function(event) {
            pl.getNextSong();
        });

        document.getElementById("shuffle").addEventListener("click", function(event) {
            pl.makePlaylist();
            pl.getNextSong();
        });

        document.getElementById("next").addEventListener("click", function(event) {
            pl.getNextSong();
        });

        document.getElementById("back").addEventListener("click", function(event) {
            pl.getPreviousSong();
        });

        document.getElementById("pacmanwtf").addEventListener("click", function(event) {
            if($('#pacmanwtfexplained').is(':visible')) {
                $('#pacmanwtfexplained').hide();
            } else {
                $('#pacmanwtfexplained').show();
            }
        });

        document.getElementById("createPlaylist").addEventListener("click", function(event) {
            manager.buildPlaylist();
            $('#editPlaylistContainer').show();
        });
       
        document.getElementById("playlistSongFilter").addEventListener("keyup", function(event) {
            manager.filterPlaylist();
        });
        
        document.getElementById("savePlaylist").addEventListener("click", function(event) {
            manager.savePlaylist();
        });

        document.getElementById("playlistName").addEventListener("keydown", function(e){
            if (e.ctrlKey || e.altKey) {
                e.preventDefault();
            } else {
                var key = e.keyCode;
                if (!((key == 8) || (key == 32) || (key == 46) || (key &gt;= 35 &amp;&amp; key &lt;= 40) || (key &gt;= 65 &amp;&amp; key &lt;= 90))) {
                    e.preventDefault();
                }
            }
        });

        document.getElementById("playlistsListing").addEventListener("click", function(event) {

            let playlistId = event.target.id;
            if(playlistId.startsWith("delete_")) {
                manager.deletePlaylist(playlistId);
            } else {
                manager.loadPlaylist(playlistId);
            }                       
        });        

        document.getElementById("clearPlaylist").addEventListener("click", function(event) {
            pl.resetPlaylist(true);
        });
        
    });
&lt;/script&gt;

&lt;style&gt;
Body {
    font-family: Verdana, Arial, sans-serif;
    font-size: 10pt;
    background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);
	background-size: 400% 400%;
	animation: gradient 15s ease infinite;
}

@keyframes gradient {
	0% {
		background-position: 0% 50%;
	}
	50% {
		background-position: 100% 50%;
	}
	100% {
		background-position: 0% 50%;
	}
}

Button {
    background-color: #000000;
    color: #66FF00;
}

.OneSong {
    cursor:pointer;
    border-radius: 8px;
    margin: 5px 0 5px 0;
    border: 1px solid;
    box-shadow: 3px 3px #cccccc;
}

.Control {
    display:inline-block;
    background-color: #cfcfcf;
    border: solid 1pt black;
    border-radius: 5px; 
    padding: 3px;
    margin: 1px 5px 1px 5px;
}

.HalfScreen {
    display: inline-block;
    width: 45%;
    padding: 7px;
}

.AlignTop {
    vertical-align: top;
}

#playlist {
    height: 80px;
    overflow-y: auto;
    background-color: #909090;
    margin-bottom:8px;
}

#playlist DIV {
    margin: 4px;
    background-color: black;
    color: #66FF00;
    padding: 4px;
    border-radius: 5px;
}

.NowPlaying {
    text-shadow: 1px 1px 8px #FFFFFF;
    font-weight: bold;
}

 #playerContainer {
    background-color: #909090;
    border: 1pt black solid;
    border-radius: 10px;
 }

.playerControl {
    padding: 8px;
    margin-left: 5px;
}

#pacmanwtf {
    cursor: pointer;
    font-size: 10pt;
    color: #6060FF;
}

.playlistRow DIV {
    display: inline-block;
    cursor: pointer;    
    margin: 5px;
    padding: 2px;
    border: 1pt solid #333333;
    border-radius: 8px;
    box-shadow: 2px 1px 1px black;
}

.deletePlaylist {
   color: #6060FF;
}

#playlistsListing{
    margin-top: 5px;
    margin-bottom: 5px;
}
&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div class="header"&gt;
    &lt;h1&gt;Media Manager Song Server&lt;/h1&gt;
    &lt;h2&gt;Project Wurlitzer&lt;/h2&gt;
&lt;/div&gt;
&lt;div class="HalfScreen AlignTop"&gt;
    &lt;h2&gt;Player&lt;/h2&gt;
    &lt;div id="playerContainer"&gt;
        &lt;div class="playerControl"&gt;
            &lt;button id="shuffle"&gt;Shuffle&lt;/button&gt;
        &lt;/div&gt;
        &lt;div class="playerControl"&gt;
            &lt;audio id="visiblePlayer" controls autoplay&gt;&lt;/audio&gt;
        &lt;/div&gt;
        &lt;div class="playerControl"&gt;
            &lt;button id="back"&gt;&lt;&lt; Back&lt;/button&gt;
            &lt;button id="next"&gt;Next &gt;&gt;&lt;/button&gt;
        &lt;/div&gt;
        &lt;div id="nowPlaying"&gt;
        &lt;/div&gt;
        &lt;div id="playlist"&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;div id="pacmanwtf"&gt;I just heard PacMan, what's up?&lt;/div&gt;
        &lt;div id="pacmanwtfexplained" style="display: none"&gt;
            &lt;p&gt;
                &lt;img src="/images/pacman" style="float: left; width: 64px; height: 61px; margin: 3px" /&gt;
                When a song title has difficult characters in it like single or double quotes, it
                can cause the song to not be found in the library. e.g. "Life's Been Good". 
                Pac Man helpfully let's you know something went wrong. Consider changing the 
                song file's name.                
            &lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div&gt;
    Future home of the user-controlled 
    quality tuner
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class="HalfScreen"&gt;
    &lt;h2&gt;Your Playlists&lt;/h2&gt;
    &lt;div&gt;
        &lt;div class='playlistRow'&gt;&lt;div class='playlistPlayButton' id='clearPlaylist'&gt;All Songs&lt;/div&gt;&lt;/div&gt;
        &lt;div id="playlistsListing"&gt;
        &lt;/div&gt;
        &lt;button id="createPlaylist"&gt;
            Create Playlist
        &lt;/button&gt;
    &lt;div&gt;
    &lt;div id="editPlaylistContainer" style="display:none"&gt;
        &lt;h2&gt;Create/Edit Playlists&lt;/h2&gt;
        &lt;div&gt;
            &lt;input type="text" placeholder="Playlist name" maxlength="20" id="playlistName"&gt;&lt;/input&gt;
            &lt;button id="savePlaylist"&gt;Save&lt;/button&gt;
        &lt;/div&gt;
        &lt;div&gt;
            &lt;input type="text" placeholder="Filter" id="playlistSongFilter"&gt;&lt;/input&gt;
        &lt;/div&gt;
        &lt;div id="playlistListing"&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;&lt;bodyHTML&gt;&gt;
&lt;/body&gt;</value>
    <comment>HTML Template for music list and player</comment>
  </data>
</root>